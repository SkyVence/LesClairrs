# .github/workflows/create-release.yml

name: Create Go Release and Upload Binaries

# This workflow runs when a new tag that looks like a version number (e.g., v1.0.0, v2.3.4) is pushed.
on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest

    # We need write permissions to create a release
    permissions:
      contents: write

    steps:
      # 1. Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch all history for all tags and branches
          fetch-depth: 0

      # 2. Set up the Go environment
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          # Specify the Go version to use
          go-version: '1.25'

      # 3. Run Go Build (Cross-Compilation)
      # This step builds the application for Linux, Windows, and macOS.
      # !! IMPORTANT: Change 'your-app-name' to the desired name for your binary.
      - name: Build Go Application
        run: |
          # Ensure dependencies are tidy
          go mod tidy
          
          # Build for Linux (amd64)
          GOOS=linux GOARCH=amd64 go build -v -o LaClair .

          # Build for Windows (amd64)
          GOOS=windows GOARCH=amd64 go build -v -o LaClair.exe .

          # Build for macOS (amd64)
          GOOS=darwin GOARCH=amd64 go build -v -o LaClair-darwin .

      # 4. Generate Automatic Release Notes
      # This step uses the GitHub CLI to generate release notes based on
      # commits since the last tag. It puts them into a file.
      - name: Generate Release Notes
        run: |
          gh release-notes -F RELEASE-NOTES.md --tag ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 5. Create the GitHub Release
      # This action creates the release and uploads the compiled binaries.
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          # The body of the release. We read the content from the file generated in the previous step.
          body_path: RELEASE-NOTES.md
          
          # The name of the release. It will be the same as the tag name.
          name: Release ${{ github.ref_name }}
          
          # The files to upload as release assets.
          # The wildcard will match all the binaries we built in the previous step.
          files: |
            LaClair-linux
            LaClair.exe
           LaClair-darwin